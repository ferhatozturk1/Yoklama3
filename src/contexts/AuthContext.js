import React, { createContext, useContext, useState, useEffect } from 'react';
import { getLecturerProfile, refreshToken, getDepartments, getFaculties, getUniversities } from '../api/auth';

// JWT token decode helper (sadece payload'ƒ± alƒ±r, imza doƒürulamasƒ± yapmaz)
const decodeJWT = (token) => {
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(jsonPayload);
  } catch (error) {
    console.error('JWT decode hatasƒ±:', error);
    return null;
  }
};

// AuthContext olu≈ütur
const AuthContext = createContext();

// AuthContext hook'u
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth hook AuthProvider i√ßinde kullanƒ±lmalƒ±dƒ±r');
  }
  return context;
};

// AuthProvider component
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [accessToken, setAccessToken] = useState(null);
  const [refreshTokenState, setRefreshTokenState] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Session temizleme helper fonksiyonu
  const clearSession = () => {
    console.log('üßπ AuthContext - Oturum temizleniyor');
    setUser(null);
    setAccessToken(null);
    setRefreshTokenState(null);
    setIsAuthenticated(false);
    sessionStorage.removeItem('user');
    sessionStorage.removeItem('token');
    sessionStorage.removeItem('refreshToken');
  };

  // Profile photo URL helper function
  const getProfilePhotoUrl = (photoPath) => {
    console.log('üì∏ AuthContext getProfilePhotoUrl √ßaƒürƒ±ldƒ±:', photoPath);
    if (!photoPath) {
      console.log('‚ùå Photo path bo≈ü');
      return null;
    }
    if (photoPath.startsWith('http')) {
      console.log('‚úÖ Zaten tam URL:', photoPath);
      return photoPath;
    }
    
    const fullUrl = `http://127.0.0.1:8000${photoPath}`;
    console.log('üîß AuthContext - Tam URL olu≈üturuldu:', fullUrl);
    
    return fullUrl;
  };

  // Profil bilgilerini √ºniversite/fak√ºlte/b√∂l√ºm bilgileri ile geni≈ület
  const loadEnhancedProfile = async (profileData) => {
    try {
      let enhancedProfile = { ...profileData };
      
      if (profileData.department_id) {
        console.log('üîç AuthContext - Department ID ile ek bilgiler √ßekiliyor:', profileData.department_id);
        
        try {
          console.log('üîç AuthContext - Backend\'den √ºniversite/fak√ºlte/b√∂l√ºm bilgileri alƒ±nƒ±yor...');
          
          // Timeout ile API √ßaƒürƒ±larƒ± - 10 saniye
          const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('API zaman a≈üƒ±mƒ±na uƒüradƒ±')), 10000)
          );
          
          // 1. T√ºm √ºniversiteleri al
          const universitiesResponse = await Promise.race([
            fetch(`http://127.0.0.1:8000/lecturer_data/universities/`, {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
                "Authorization": accessToken ? `Bearer ${accessToken}` : undefined
              }
            }),
            timeoutPromise
          ]);

          if (!universitiesResponse.ok) {
            throw new Error(`Universities API failed: ${universitiesResponse.status}`);
          }

          const universities = await universitiesResponse.json();
          console.log('‚úÖ AuthContext - √úniversiteler alƒ±ndƒ±:', universities.length, 'adet');

          // 2. Her √ºniversite i√ßin fak√ºltelerini ve b√∂l√ºmlerini kontrol et (maksimum 3 √ºniversite)
          let foundInfo = null;
          const maxUniversitiesToCheck = Math.min(universities.length, 3);

          for (let i = 0; i < maxUniversitiesToCheck && !foundInfo; i++) {
            const university = universities[i];
            
            try {
              const facultiesResponse = await Promise.race([
                fetch(`http://127.0.0.1:8000/lecturer_data/faculties/${university.id}/`, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                    "Authorization": accessToken ? `Bearer ${accessToken}` : undefined
                  }
                }),
                timeoutPromise
              ]);

              if (facultiesResponse.ok) {
                const faculties = await facultiesResponse.json();
                console.log(`üîç AuthContext - ${university.name} - ${faculties.length} fak√ºlte bulundu`);

                // Her fak√ºlte i√ßin b√∂l√ºmleri kontrol et (maksimum 5 fak√ºlte)
                const maxFacultiesToCheck = Math.min(faculties.length, 5);
                
                for (let j = 0; j < maxFacultiesToCheck && !foundInfo; j++) {
                  const faculty = faculties[j];
                  
                  try {
                    const departmentsResponse = await Promise.race([
                      fetch(`http://127.0.0.1:8000/lecturer_data/departments/${faculty.id}/`, {
                        method: "GET",
                        headers: {
                          "Content-Type": "application/json",
                          "Authorization": accessToken ? `Bearer ${accessToken}` : undefined
                        }
                      }),
                      timeoutPromise
                    ]);

                    if (departmentsResponse.ok) {
                      const departments = await departmentsResponse.json();
                      console.log(`üîç AuthContext - ${faculty.name} - ${departments.length} b√∂l√ºm bulundu`);

                      // Kullanƒ±cƒ±nƒ±n department_id'sini bul
                      const userDepartment = departments.find(dept => dept.id === profileData.department_id);
                      
                      if (userDepartment) {
                        foundInfo = {
                          university: university.name,
                          faculty: faculty.name,
                          department: userDepartment.name,
                          university_id: university.id,
                          faculty_id: faculty.id,
                          department_id: userDepartment.id
                        };
                        console.log('üéØ AuthContext - Kullanƒ±cƒ±nƒ±n b√∂l√ºm√º bulundu!', {
                          university: foundInfo.university,
                          faculty: foundInfo.faculty,
                          department: foundInfo.department
                        });
                        break;
                      }
                    }
                  } catch (deptError) {
                    console.log(`‚ö†Ô∏è AuthContext - ${faculty.name} b√∂l√ºmleri alƒ±namadƒ±:`, deptError.message);
                  }
                }
              }
            } catch (facultyError) {
              console.log(`‚ö†Ô∏è AuthContext - ${university.name} fak√ºlteleri alƒ±namadƒ±:`, facultyError.message);
            }
          }

          if (foundInfo) {
            // Backend'den alƒ±nan ger√ßek bilgileri kullan
            enhancedProfile.university = foundInfo.university;
            enhancedProfile.faculty = foundInfo.faculty;
            enhancedProfile.department = foundInfo.department;
            
            console.log('‚úÖ AuthContext - Backend\'den ger√ßek akademik bilgiler alƒ±ndƒ±:', {
              university: enhancedProfile.university,
              faculty: enhancedProfile.faculty,
              department: enhancedProfile.department
            });
          } else {
            // Bulunamazsa varsayƒ±lan deƒüerler
            enhancedProfile.department = `B√∂l√ºm ${profileData.department_id.substring(0, 8)}`;
            enhancedProfile.faculty = 'Celal Bayar √úniversitesi Fak√ºltesi';
            enhancedProfile.university = 'Celal Bayar √úniversitesi';
            
            console.log('‚ö†Ô∏è AuthContext - Backend\'den b√∂l√ºm bulunamadƒ±, varsayƒ±lan deƒüerler kullanƒ±lƒ±yor');
          }
          
        } catch (apiError) {
          console.error('‚ùå AuthContext - API √ßaƒürƒ±sƒ± hatasƒ±:', apiError);
          // API hatasƒ± durumunda varsayƒ±lan deƒüerler
          enhancedProfile.department = `B√∂l√ºm ${profileData.department_id.substring(0, 8)}`;
          enhancedProfile.faculty = 'Celal Bayar √úniversitesi Fak√ºltesi';
          enhancedProfile.university = 'Celal Bayar √úniversitesi';
        }
      } else {
        // Department_id yoksa varsayƒ±lan deƒüerler
        enhancedProfile.department = 'B√∂l√ºm Bilgisi';
        enhancedProfile.faculty = 'Celal Bayar √úniversitesi Fak√ºltesi';
        enhancedProfile.university = 'Celal Bayar √úniversitesi';
        console.log('‚ö†Ô∏è AuthContext - Department ID bulunamadƒ±, varsayƒ±lan deƒüerler atanƒ±yor');
      }
      
      return enhancedProfile;
    } catch (error) {
      console.error('‚ùå AuthContext - Profil geli≈ütirme hatasƒ±:', error);
      return {
        ...profileData,
        department: 'B√∂l√ºm Bilgisi',
        faculty: 'Celal Bayar √úniversitesi Fak√ºltesi',
        university: 'Celal Bayar √úniversitesi'
      };
    }
  };

  // Sayfa y√ºklendiƒüinde sessionStorage'dan kullanƒ±cƒ± bilgilerini y√ºkle
  useEffect(() => {
    const loadUserFromStorage = async () => {
      try {
        const storedUser = sessionStorage.getItem('user');
        const storedToken = sessionStorage.getItem('token');
        const storedRefreshToken = sessionStorage.getItem('refreshToken');

        console.log('üîç AuthContext - SessionStorage verileri kontrol ediliyor:');
        console.log('User:', storedUser);
        console.log('Token:', storedToken);
        console.log('RefreshToken:', storedRefreshToken);

        if (storedToken) {
          setAccessToken(storedToken);
          setRefreshTokenState(storedRefreshToken);

          if (storedUser) {
            // Kullanƒ±cƒ± verisi varsa direkt y√ºkle
            const userData = JSON.parse(storedUser);
            setUser(userData);
            setIsAuthenticated(true);
            console.log('‚úÖ AuthContext - Kullanƒ±cƒ± oturumu y√ºklendi:', userData);
          } else {
            // Kullanƒ±cƒ± verisi yoksa token'dan lecturer_id'yi √ßƒ±karƒ±p profil getir
            console.log('üîÑ AuthContext - Token var ama kullanƒ±cƒ± verisi yok, profil getiriliyor...');
            try {
              // JWT token'dan lecturer_id'yi √ßƒ±kar
              const decodedToken = decodeJWT(storedToken);
              console.log('üîç AuthContext - JWT token decode edildi:', decodedToken);
              
              const lecturerId = decodedToken?.lecturer_id;
              if (!lecturerId) {
                console.error('‚ùå AuthContext - JWT token\'da lecturer_id bulunamadƒ±');
                clearSession();
                return;
              }
              
              console.log('üìã AuthContext - Lecturer ID bulundu:', lecturerId);
              const profileData = await getLecturerProfile(lecturerId, storedToken);
              
              if (profileData) {
                // Profili ek bilgilerle geni≈ület
                const enhancedProfile = await loadEnhancedProfile(profileData);
                
                const userData = {
                  id: lecturerId,
                  lecturer_id: lecturerId,
                  first_name: enhancedProfile.first_name,
                  last_name: enhancedProfile.last_name,
                  email: enhancedProfile.email,
                  title: enhancedProfile.title,
                  phone: enhancedProfile.phone,
                  department_id: enhancedProfile.department_id,
                  department: enhancedProfile.department,
                  faculty: enhancedProfile.faculty,
                  university: enhancedProfile.university,
                  profile_photo: enhancedProfile.profile_photo,
                };
                
                setUser(userData);
                setIsAuthenticated(true);
                
                // SessionStorage'a da kaydet
                sessionStorage.setItem('user', JSON.stringify(userData));
                console.log('‚úÖ AuthContext - Geli≈ütirilmi≈ü profil token ile y√ºklendi:', userData);
              } else {
                console.log('‚ö†Ô∏è AuthContext - Profil getirilemedi, oturum sonlandƒ±rƒ±lƒ±yor');
                clearSession();
              }
            } catch (error) {
              console.error('‚ùå AuthContext - Profil y√ºkleme hatasƒ±:', error);
              clearSession();
            }
          }
        } else {
          console.log('‚ö†Ô∏è AuthContext - SessionStorage\'da token bulunamadƒ±');
        }
      } catch (error) {
        console.error('‚ùå AuthContext - SessionStorage okuma hatasƒ±:', error);
        clearSession();
      } finally {
        setIsLoading(false);
      }
    };

    loadUserFromStorage();
  }, []);

  // Login fonksiyonu
  const login = async (loginData) => {
    try {
      console.log('üîê AuthContext - Login i≈ülemi ba≈ülatƒ±lƒ±yor:', loginData);

      let token = null;
      let lecturerId = null;

      // Token'larƒ± kaydet
      if (loginData.access || loginData.token) {
        token = loginData.access || loginData.token;
        setAccessToken(token);
        sessionStorage.setItem('token', token);
        console.log('üîë AuthContext - Access token kaydedildi');
      }

      if (loginData.refresh) {
        setRefreshTokenState(loginData.refresh);
        sessionStorage.setItem('refreshToken', loginData.refresh);
        console.log('üîÑ AuthContext - Refresh token kaydedildi');
      }

      // Lecturer ID'yi belirle
      if (loginData.lecturer_id) {
        lecturerId = loginData.lecturer_id;
      } else if (loginData.lecturer) {
        lecturerId = loginData.lecturer.id;
      }

      // Eƒüer lecturer_id varsa profil bilgilerini √ßek
      if (lecturerId && token) {
        console.log('üìã AuthContext - Profil bilgileri √ßekiliyor...', lecturerId);
        
        try {
          const profileData = await getLecturerProfile(lecturerId, token);
          
          if (profileData) {
            // Profili ek bilgilerle geni≈ület
            const enhancedProfile = await loadEnhancedProfile(profileData);
            
            const userData = {
              id: lecturerId,
              lecturer_id: lecturerId,
              first_name: enhancedProfile.first_name,
              last_name: enhancedProfile.last_name,
              email: enhancedProfile.email,
              title: enhancedProfile.title,
              phone: enhancedProfile.phone,
              department_id: enhancedProfile.department_id,
              department: enhancedProfile.department,
              faculty: enhancedProfile.faculty,
              university: enhancedProfile.university,
              profile_photo: enhancedProfile.profile_photo,
            };
            
            setUser(userData);
            sessionStorage.setItem('user', JSON.stringify(userData));
            console.log('‚úÖ AuthContext - Geli≈ütirilmi≈ü profil bilgileri ile kullanƒ±cƒ± kaydedildi:', userData);
          } else {
            // Profil √ßekilemezse en azƒ±ndan lecturer_id'yi kaydet
            const userData = {
              id: lecturerId,
              lecturer_id: lecturerId,
            };
            setUser(userData);
            sessionStorage.setItem('user', JSON.stringify(userData));
            console.log('‚ö†Ô∏è AuthContext - Sadece lecturer_id kaydedildi:', userData);
          }
        } catch (profileError) {
          console.error('‚ùå AuthContext - Login sonrasƒ± profil y√ºkleme hatasƒ±:', profileError);
          // Profil √ßekilemezse en azƒ±ndan lecturer_id'yi kaydet
          const userData = {
            id: lecturerId,
            lecturer_id: lecturerId,
          };
          setUser(userData);
          sessionStorage.setItem('user', JSON.stringify(userData));
          console.log('‚ö†Ô∏è AuthContext - Hata sonrasƒ± sadece lecturer_id kaydedildi:', userData);
        }
      }

      // Session'a kullanƒ±cƒ± bilgilerini kaydet (eƒüer lecturer objesi varsa - fallback)
      if (loginData.lecturer && !lecturerId) {
        const userData = loginData.lecturer;
        setUser(userData);
        sessionStorage.setItem('user', JSON.stringify(userData));
        console.log('ÔøΩ AuthContext - Lecturer objesi kaydedildi:', userData);
      }

      setIsAuthenticated(true);
      console.log('‚úÖ AuthContext - Login ba≈üarƒ±lƒ±');

      return loginData;
    } catch (error) {
      console.error('‚ùå AuthContext - Login hatasƒ±:', error);
      throw error;
    }
  };

  // Logout fonksiyonu
  const logout = () => {
    console.log('üö™ AuthContext - Kullanƒ±cƒ± oturumu sonlandƒ±rƒ±lƒ±yor');
    
    // clearSession helper fonksiyonunu kullan
    clearSession();
    
    console.log('‚úÖ AuthContext - Oturum ba≈üarƒ±yla sonlandƒ±rƒ±ldƒ±');
    
    // T√ºm sessionStorage'ƒ± da temizle (ek g√ºvenlik i√ßin)
    try {
      sessionStorage.clear();
      console.log('üßπ AuthContext - SessionStorage tamamen temizlendi');
    } catch (error) {
      console.error('‚ùå AuthContext - SessionStorage temizleme hatasƒ±:', error);
    }
  };

  // Profil bilgilerini API'den y√ºkle
  const loadUserProfile = async (forceRefresh = false) => {
    console.log('üîÑ === AUTHCONTEXT LOAD USER PROFILE BA≈ûLIYOR ===');
    console.log('üìä Parametreler:', { forceRefresh });
    
    if (!user || !accessToken) {
      console.warn('‚ö†Ô∏è === EKSIK Bƒ∞LGƒ∞LER - AuthContext ===');
      console.warn('üë§ User mevcut:', !!user);
      console.warn('üîë AccessToken mevcut:', !!accessToken);
      console.warn('üë§ User detay:', user);
      return null;
    }

    try {
      console.log('üìã === API √áAƒûRISI YAPILIYOR ===');
      console.log('üë§ User ID:', user.id);
      console.log('üîë Token mevcut:', !!accessToken);
      console.log('üë§ Mevcut user bilgileri:', {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        email: user.email,
        title: user.title,
        phone: user.phone
      });

      const profileData = await getLecturerProfile(user.id, accessToken);
      
      console.log('‚úÖ === API YANITI ALINDI ===');
      console.log('üìä Ham API Response:', profileData);

      // Profil bilgilerini formatlayarak d√∂nd√ºr
      const formattedProfile = {
        id: profileData.id,
        name: `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim(),
        firstName: profileData.first_name || '',
        lastName: profileData.last_name || '',
        title: profileData.title || '',
        email: profileData.email || '',
        phone: profileData.phone || '',
        department_id: profileData.department_id || '',
        profilePhoto: getProfilePhotoUrl(profileData.profile_photo),
        created_at: profileData.created_at || '',
      };
      
      console.log('üîß === FORMATLANMI≈û PROFIL VERƒ∞Sƒ∞ ===');
      console.log('üìä Formatted Profile:', formattedProfile);

      // Eƒüer force refresh ise kullanƒ±cƒ± bilgilerini g√ºncelle
      if (forceRefresh) {
        console.log('üîÑ Force refresh aktif, kullanƒ±cƒ± bilgileri g√ºncelleniyor...');
        const updatedUser = {
          ...user,
          first_name: profileData.first_name,
          last_name: profileData.last_name,
          title: profileData.title,
          email: profileData.email,
          phone: profileData.phone,
        };
        setUser(updatedUser);
        sessionStorage.setItem('user', JSON.stringify(updatedUser));
        console.log('üîÑ AuthContext - Kullanƒ±cƒ± bilgileri g√ºncellendi:', updatedUser);
      }

      console.log('‚úÖ === PROFIL BA≈ûARIYLA D√ñND√úR√úL√úYOR ===');
      return formattedProfile;
    } catch (error) {
      console.error('‚ùå === PROFIL Y√úKLEME HATASI - AuthContext ===');
      console.error('Error message:', error.message);
      console.error('Error stack:', error.stack);
      
      // Token s√ºresi dolmu≈üsa refresh token ile yenile
      if (error.message.includes('401') || error.message.includes('token')) {
        try {
          await refreshAccessToken();
          // Tekrar dene
          return await loadUserProfile(forceRefresh);
        } catch (refreshError) {
          console.error('‚ùå AuthContext - Token yenileme hatasƒ±:', refreshError);
          clearSession();
          throw refreshError;
        }
      }
      
      throw error;
    }
  };

  // Access token'ƒ± yenile
  const refreshAccessToken = async () => {
    if (!refreshTokenState) {
      throw new Error('Refresh token bulunamadƒ±');
    }

    try {
      console.log('üîÑ AuthContext - Token yenileniyor...');
      const response = await refreshToken(refreshTokenState);
      
      if (response.access) {
        setAccessToken(response.access);
        sessionStorage.setItem('token', response.access);
        console.log('‚úÖ AuthContext - Token ba≈üarƒ±yla yenilendi');
        return response.access;
      } else {
        throw new Error('Yeni token alƒ±namadƒ±');
      }
    } catch (error) {
      console.error('‚ùå AuthContext - Token yenileme hatasƒ±:', error);
      // logout fonksiyonu a≈üaƒüƒ±da tanƒ±mlanacak
      throw error;
    }
  };

  // User bilgilerini g√ºncelle (profil fotoƒürafƒ± g√ºncellemesi i√ßin)
  const updateUser = (updates) => {
    console.log('üîÑ AuthContext - User bilgileri g√ºncelleniyor:', updates);
    const updatedUser = {
      ...user,
      ...updates
    };
    setUser(updatedUser);
    sessionStorage.setItem('user', JSON.stringify(updatedUser));
    console.log('‚úÖ AuthContext - User g√ºncellendi:', updatedUser);
  };

  // Context value
  const value = {
    user,
    accessToken,
    isLoading,
    isAuthenticated,
    login,
    logout,
    loadUserProfile,
    refreshAccessToken,
    setUser, // Profil g√ºncelleme sonrasƒ± kullanƒ±cƒ± bilgilerini g√ºncelleme i√ßin
    updateUser, // User bilgilerini g√ºncelleme i√ßin
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
